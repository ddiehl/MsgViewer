# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    macos:
      xcode: 11.3.0 # indicate our selected version of Xcode
    steps: # a series of commands to run
      - checkout  # pull down code from your version control system.
      - run:
          name: Run Unit Tests
          command: java --version
#    docker:
#      - image: cimg/openjdk:16.0.1
#    steps:
      # Checkout the code as the first step.
#      - checkout
      # Use mvn clean and package as the standard maven build phase
#      - run:
#          name: Build
#          command: mvn -B -DskipTests clean package
      # Then run your tests!
#      - run:
#          name: Test
#          command: mvn test
#      - run:
#          name: Package
#          command: /usr/local/jdk-16.0.1/bin/jpackage --type dmg -i target -n "MSG Viewer" --icon "osx-packager/msg-viewer.icns" --main-class net.sourceforge.MSGViewer.ModuleLauncher --main-jar msgviewer.jar

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - build-and-test
